---
stages:
  - stage: validate
    displayName: Validation Bicep
    variables:
      - group: ${variable_group_name}
      - name: ENV_FILE
        value: .env
      - name: IS_PULL_REQUEST
        value: $[eq(variables['Build.Reason'], 'PullRequest')]
    jobs:
      - job: validate
        displayName: Validate Bicep
        pool:
          ${agent_pool_configuration}
        steps:
          - checkout: self
            displayName: Checkout Repo

          - template: helpers/bicep-installer.yaml

          - pwsh: |
              if (Test-Path -Path ./custom-modules/*)
              {
                echo "##vso[task.setvariable variable=CUSTOM_MODULES;]true"
                echo "Set CUSTOM_MODULES to true"
              }
              else
              {
                echo "Set CUSTOM_MODULES to false"
              }
            workingDirectory: config
            displayName: Check for Custom Modules

          - pwsh: |
              $output = @()
              Get-ChildItem -Recurse -Filter '*.bicep' | ForEach-Object {
                  Write-Information "==> Attempting Bicep Build For File: $_" -InformationAction Continue
                  $bicepOutput = bicep build $_.FullName 2>&1
                  if ($LastExitCode -ne 0)
                  {
                    foreach ($item in $bicepOutput) {
                      $output += "$($item) `r`n"
                    }
                  }
                  else
                  {
                    echo "Bicep Build Successful for File: $_"
                  }
              }
              if ($output.length -gt 0) {
                throw $output
              }
            workingDirectory: config/custom-modules
            condition: eq(variables['CUSTOM_MODULES'], 'true')
            displayName: Bicep Build & Lint All Custom Modules
            
      - job: validate
        displayName: Validate Bicep
        pool:
          ${agent_pool_configuration}
        steps:
          - checkout: self
            displayName: Checkout Repo

          - bash: |
              docker pull github/super-linter:latest
              docker run \
                -e RUN_LOCAL=true \
                -e VALIDATE_JSON=true \
                -e VALIDATE_MARKDOWN=true \
                -e VALIDATE_POWERSHELL=true \
                -e VALIDATE_YAML=true \
                -e VALIDATE_EDITORCONFIG=true \
                -e "FILTER_REGEX_EXCLUDE=.*upstream-releases/*|.*generateddocs/.*.bicep.md" \
                -v $(System.DefaultWorkingDirectory):/tmp/lint \
                github/super-linter
            displayName: Run github/super-linter

      - deployment: whatif
        displayName: What If Deploy with Bicep
        pool:
          ${agent_pool_configuration}
        environment: ${environment_name_plan}
        timeoutInMinutes: 0
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: Checkout Bicep Module

                - template: helpers/bicep-installer.yaml

                - pwsh: |
                    (Get-Content -Path $env:ENV_FILE -Encoding UTF8) | ForEach-Object {$_ -replace '"',''} | Out-File -FilePath $env:ENV_FILE -Encoding UTF8
                  displayName: Remove Quotation Marks from Environment File

                - pwsh: |
                    Write-Host $env:ENV_FILE
                    Get-Content -Path $env:ENV_FILE -Encoding UTF8 | ForEach-Object {
                      $envVarName, $envVarValue = ($_ -replace '"','').split('=')
                      echo "##vso[task.setvariable variable=$envVarName;]$envVarValue"
                      echo "Set $envVarName to $envVarValue]"
                    }
                  displayName: Import Environment Variables from File

                - template: helpers/bicep-deploy.yaml
                  parameters:
                    serviceConnection: '${service_connection_name_plan}'
                    scriptFiles:
                      - displayName: Management Groups Deployment
                        path: .\pipeline-scripts\Deploy-ALZManagementGroups.ps1
                      - displayName: Logging and Sentinel Resource Group Deployment
                        path: .\pipeline-scripts\Deploy-ALZLoggingAndSentinelResourceGroup.ps1
                      - displayName: Logging and Sentinel Deployment
                        path: .\pipeline-scripts\Deploy-ALZLoggingAndSentinel.ps1
                      - displayName: Custom Policy Definitions Deployment
                        path: .\pipeline-scripts\Deploy-ALZCustomPolicyDefinitions.ps1
                      - displayName: Custom Role Definitions Deployment
                        path: .\pipeline-scripts\Deploy-ALZCustomRoleDefinitions.ps1
                      - displayName: Custom Management Group Diagnostic Settings
                        path: .\pipeline-scripts\Deploy-ALZMGDiagnosticSettings.ps1
                      - displayName: CBuilt-in and Custom Policy Assignments Deployment
                        path: .\pipeline-scripts\Deploy-ALZPolicyAssignments.ps1
                      - displayName: Deploy Subscription Placement
                        path: .\pipeline-scripts\Deploy-ALZSubscriptionPlacement.ps1
                      - displayName: Connectivity Resource Group Deployment
                        path: .\pipeline-scripts\Deploy-ALZConnectivityResourceGroup.ps1`
                      - $${{ if eq(variables['networking'], 'hubSpoke') }} :
                        - displayName: Hub (Hub-and-Spoke) Deployment
                          path: .\pipeline-scripts\Deploy-ALZHub-HubAndSpoke.ps1
                      - $${{ if eq(variables['networking'], 'vwan') }} :
                        - displayName: Hub (VWAN) Deployment
                          path: .\pipeline-scripts\Deploy-ALZHub-VWAN.ps1
